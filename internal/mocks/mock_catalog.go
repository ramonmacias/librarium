// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/catalog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	catalog "librarium/internal/catalog"
	query "librarium/internal/query"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCatalogRepository is a mock of Repository interface.
type MockCatalogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogRepositoryMockRecorder
}

// MockCatalogRepositoryMockRecorder is the mock recorder for MockCatalogRepository.
type MockCatalogRepositoryMockRecorder struct {
	mock *MockCatalogRepository
}

// NewMockCatalogRepository creates a new mock instance.
func NewMockCatalogRepository(ctrl *gomock.Controller) *MockCatalogRepository {
	mock := &MockCatalogRepository{ctrl: ctrl}
	mock.recorder = &MockCatalogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogRepository) EXPECT() *MockCatalogRepositoryMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockCatalogRepository) CreateAsset(asset *catalog.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockCatalogRepositoryMockRecorder) CreateAsset(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockCatalogRepository)(nil).CreateAsset), asset)
}

// DeleteAsset mocks base method.
func (m *MockCatalogRepository) DeleteAsset(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockCatalogRepositoryMockRecorder) DeleteAsset(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockCatalogRepository)(nil).DeleteAsset), id)
}

// FindAssets mocks base method.
func (m *MockCatalogRepository) FindAssets(filters query.Filters, sorting *query.Sorting, pagination *query.Pagination) ([]*catalog.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAssets", filters, sorting, pagination)
	ret0, _ := ret[0].([]*catalog.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssets indicates an expected call of FindAssets.
func (mr *MockCatalogRepositoryMockRecorder) FindAssets(filters, sorting, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssets", reflect.TypeOf((*MockCatalogRepository)(nil).FindAssets), filters, sorting, pagination)
}

// GetAsset mocks base method.
func (m *MockCatalogRepository) GetAsset(id uuid.UUID) (*catalog.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", id)
	ret0, _ := ret[0].(*catalog.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockCatalogRepositoryMockRecorder) GetAsset(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockCatalogRepository)(nil).GetAsset), id)
}
