// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	query "librarium/internal/query"
	user "librarium/internal/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of Repository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockUserRepository) CreateCustomer(customer *user.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockUserRepositoryMockRecorder) CreateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockUserRepository)(nil).CreateCustomer), customer)
}

// CreateLibrarian mocks base method.
func (m *MockUserRepository) CreateLibrarian(librarian *user.Librarian) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLibrarian", librarian)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLibrarian indicates an expected call of CreateLibrarian.
func (mr *MockUserRepositoryMockRecorder) CreateLibrarian(librarian interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLibrarian", reflect.TypeOf((*MockUserRepository)(nil).CreateLibrarian), librarian)
}

// FindCustomers mocks base method.
func (m *MockUserRepository) FindCustomers(filters query.Filters, sorting *query.Sorting, pagination *query.Pagination) ([]*user.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomers", filters, sorting, pagination)
	ret0, _ := ret[0].([]*user.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomers indicates an expected call of FindCustomers.
func (mr *MockUserRepositoryMockRecorder) FindCustomers(filters, sorting, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomers", reflect.TypeOf((*MockUserRepository)(nil).FindCustomers), filters, sorting, pagination)
}

// GetCustomer mocks base method.
func (m *MockUserRepository) GetCustomer(id uuid.UUID) (*user.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", id)
	ret0, _ := ret[0].(*user.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockUserRepositoryMockRecorder) GetCustomer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockUserRepository)(nil).GetCustomer), id)
}

// GetLibrarianByEmail mocks base method.
func (m *MockUserRepository) GetLibrarianByEmail(email string) (*user.Librarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibrarianByEmail", email)
	ret0, _ := ret[0].(*user.Librarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibrarianByEmail indicates an expected call of GetLibrarianByEmail.
func (mr *MockUserRepositoryMockRecorder) GetLibrarianByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibrarianByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetLibrarianByEmail), email)
}

// UpdateCustomer mocks base method.
func (m *MockUserRepository) UpdateCustomer(customer *user.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockUserRepositoryMockRecorder) UpdateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockUserRepository)(nil).UpdateCustomer), customer)
}
