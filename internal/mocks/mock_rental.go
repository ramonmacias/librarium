// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rental/rental.go

// Package mocks is a generated GoMock package.
package mocks

import (
	query "librarium/internal/query"
	rental "librarium/internal/rental"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRentalRepository is a mock of Repository interface.
type MockRentalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRentalRepositoryMockRecorder
}

// MockRentalRepositoryMockRecorder is the mock recorder for MockRentalRepository.
type MockRentalRepositoryMockRecorder struct {
	mock *MockRentalRepository
}

// NewMockRentalRepository creates a new mock instance.
func NewMockRentalRepository(ctrl *gomock.Controller) *MockRentalRepository {
	mock := &MockRentalRepository{ctrl: ctrl}
	mock.recorder = &MockRentalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRentalRepository) EXPECT() *MockRentalRepositoryMockRecorder {
	return m.recorder
}

// CreateRental mocks base method.
func (m *MockRentalRepository) CreateRental(rental *rental.Rental) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRental", rental)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRental indicates an expected call of CreateRental.
func (mr *MockRentalRepositoryMockRecorder) CreateRental(rental interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRental", reflect.TypeOf((*MockRentalRepository)(nil).CreateRental), rental)
}

// FindRentals mocks base method.
func (m *MockRentalRepository) FindRentals(filters query.Filters, sorting *query.Sorting, pagination *query.Pagination) ([]*rental.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRentals", filters, sorting, pagination)
	ret0, _ := ret[0].([]*rental.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRentals indicates an expected call of FindRentals.
func (mr *MockRentalRepositoryMockRecorder) FindRentals(filters, sorting, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRentals", reflect.TypeOf((*MockRentalRepository)(nil).FindRentals), filters, sorting, pagination)
}

// GetActiveRental mocks base method.
func (m *MockRentalRepository) GetActiveRental(customerID, assetID uuid.UUID) (*rental.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRental", customerID, assetID)
	ret0, _ := ret[0].(*rental.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRental indicates an expected call of GetActiveRental.
func (mr *MockRentalRepositoryMockRecorder) GetActiveRental(customerID, assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRental", reflect.TypeOf((*MockRentalRepository)(nil).GetActiveRental), customerID, assetID)
}

// GetRental mocks base method.
func (m *MockRentalRepository) GetRental(id uuid.UUID) (*rental.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRental", id)
	ret0, _ := ret[0].(*rental.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRental indicates an expected call of GetRental.
func (mr *MockRentalRepositoryMockRecorder) GetRental(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRental", reflect.TypeOf((*MockRentalRepository)(nil).GetRental), id)
}

// UpdateRental mocks base method.
func (m *MockRentalRepository) UpdateRental(rental *rental.Rental) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRental", rental)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRental indicates an expected call of UpdateRental.
func (mr *MockRentalRepositoryMockRecorder) UpdateRental(rental interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRental", reflect.TypeOf((*MockRentalRepository)(nil).UpdateRental), rental)
}
